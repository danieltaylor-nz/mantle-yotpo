<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <!-- These services are based on the YotPo API, version 1. See: https://apidocs.yotpo.com/reference#general-information -->
    
    <service verb="create" noun="Order">
        <in-parameters>
            <parameter name="validateData" required="true"><description>A Boolean flag to indicate input validation in the response, by default is true</description></parameter>
            <parameter name="orderId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <if condition="orderHeader == null"><return/></if>
            <set field="productStoreId" from="orderHeader.productStoreId"/>
            <if condition="!productStoreId"><return message="No productStoreId found in order with orderId ${orderId}"/></if>
            
            <set field="orderPartList" from="orderHeader.parts"/>
            <if condition="!orderPartList"><return/></if>
            <set field="customerPartyId" from="orderPartList[0].customerPartyId"/>
            <if condition="!customerPartyId"><return/></if>

            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore">
                <field-map field-name="productStoreId"/></entity-find-one>
            <if condition="!productStore"><return message="No productStore found with productStoreId ${productStoreId}"/></if>   

            <set field="yotPoConfigId" from="productStore.yotPoConfigId"/>
            <if condition="yotPoConfigId == null"><return message="No yotPoConfigId found with productStoreId ${productStoreId}"/></if>
            
            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="emailInfo"
                in-map="[partyId:customerPartyId, emailContactMechPurposeId:'EmailOrder', 
                defaultToPrimaryPurpose:true]"/>
            <set field="email" from="emailInfo.emailAddress"/>
            <if condition="email == null">
                <return message="The client's email was not found with customerPartyId ${customerPartyId}"/>
            </if>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="partyDetail">
                <field-map field-name="partyId" from="customerPartyId"/>
            </entity-find-one>
            <if condition="partyDetail == null"><return message="No partyDetail found with partyId ${customerPartyId}"/></if>

            <entity-find-one entity-name="YotPo.YotPoConfiguration"  value-field="yotPoConfig"/>
            <if condition="yotPoConfig == null">
                <return error="true" message="No YotPoConfiguration found with ID ${yotPoConfigId}"/>
            </if>

            <set field="organizationName" from="partyDetail.organizationName ? partyDetail.organizationName : ''"/>
            <set field="customerName" from="partyDetail.firstName + ' ' + partyDetail.lastName + ' ' + organizationName"/>

            <service-call name="mantle.order.OrderInfoServices.get#OrderDisplayInfo" in-map="[orderId:orderId]" out-map="orderInfo"/>
            <if condition="orderInfo == null"><return/></if>
            <set field="productsList" type="NewMap" value="null"/>
            <script>productsList = new HashMap()</script>

            <entity-find-one entity-name="mantle.product.store.ProductStoreSetting" value-field="productImageLocation">
                <econdition field-name="productStoreId" from="productStoreId"/>
                <econdition field-name="settingTypeEnumId" from="'PsstProductImageLoc'"/>
            </entity-find-one>
            <if condition="productImageLocation == null"><return message="No productImageLocation found with productStoreId ${productStoreId}"/></if>

            <entity-find-one entity-name="mantle.product.store.ProductStoreSetting" value-field="productDetailLocation">
                <econdition field-name="productStoreId" from="productStoreId"/>
                <econdition field-name="settingTypeEnumId" from="'PsstProductDetailLoc'"/>
            </entity-find-one>
            <if condition="productImageLocation == null"><return message="No productDetailLocation found with productStoreId ${productStoreId}"/></if>

            <iterate list="orderInfo.orderItemList" entry="orderItem">
                <if condition="orderItem.itemTypeEnumId == 'ItemProduct'">
                    <set field="productId" from="orderItem.productId"/>
                    <entity-find-one entity-name="mantle.product.Product" value-field="product"/>
                    <entity-find entity-name="mantle.product.ProductContent" list="contentList" cache="true">
                        <date-filter/><econdition field-name="productId"/>
                        <order-by field-name="sequenceNum,-fromDate"/>
                    </entity-find>
                    <if condition="contentList != null">
                        <set field="imageDetail" from="contentList.find({'PcntImageDetail' == it.productContentTypeEnumId})"/>
                        <if condition="imageDetail == null">
                            <set field="imageDetail" from="contentList.find({'PcntImageMedium' == it.productContentTypeEnumId})"/>
                            <if condition="imageDetail == null">
                                <set field="imageDetail" from="contentList.find({'PcntImageSmall' == it.productContentTypeEnumId})"/>
                            </if>
                        </if>
                        <set field="productImageBaseUrl" from="productStore.storeDomain + '/' + productImageLocation.settingValue + '/' + imageDetail.productContentId ? imageDetail.productContentId : ''"/>

                        <set field="longDescLocation" from="contentList.find({'PcntDescriptionLong' == 
                        it.productContentTypeEnumId})?.contentLocation"/>

                        <if condition="longDescLocation">
                            <set field="descriptionLong" from="ec.resource.getLocationText(longDescLocation, true)"/>
                        </if>
                    </if>
                    
                    <set field="productDetailBaseUrl" from="productStore.storeDomain + productDetailLocation.settingValue + '/' + productId"/>
                
                    <set field="item" from="[url:productDetailBaseUrl, name:orderItem.itemDescription, 
                        image:productImageBaseUrl ? productImageBaseUrl : productStore.storeDomain + '/' + productImageLocation.settingValue, description: descriptionLong ? descriptionLong : '', 
                        price:orderItem.unitAmount, 
                        specs:[sku:orderItem.productId], product_tags:product.comments]"/>
                    <script>productsList.put(orderItem.productId, item)</script>
                </if> 
            </iterate>
             
            <service-call name="YotPo.YotPoServices.login#YotPo" in-map="context" out-map="token"/>
            <if condition="token.token.access_token == null">
                <return error="true" message="Error with YotPo Access Token."/>
            </if>
            <set field="uToken" from="token.token.access_token"/>

            <script>
                import java.text.SimpleDateFormat

                Calendar calendar = Calendar.getInstance()
                calendar.setTimeInMillis(orderInfo.orderHeader.entryDate.getTime())
                SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd")
                String date = format.format(calendar.getTime())
            </script>
            <set field="requestMap" from="[validate_data:validateData, platform:yotPoConfig.platform, utoken:uToken, email:email,
                customer_name:customerName,order_date:date, order_id:orderId,currency_iso:orderInfo.orderHeader.currencyUomId,
                products:productsList]" />

            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                        .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host(yotPoConfig.hostName ?: "api.yotpo.com").port(443)
                        .path("apps").path("${yotPoConfig.clientId}").path("purchases").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
            
                if (restResponse.statusCode != 200) {
                    ec.logger.error("YotPo API Response ${restResponse.statusCode}")
                    ec.message.addMessage("YotPo API Error ${restResponse.statusCode}")
                    return
                }

                responseMap = restResponse.jsonObject()

            ]]></script>
        </actions>
    </service>
    
    <service verb="update" noun="Product">
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="productStoreId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore">
                <field-map field-name="productStoreId"/></entity-find-one>
            <if condition="productStore == null"><return message="No productStore found with productStoreId ${productStoreId}"/></if>

            <set field="yotPoConfigId" from="productStore.yotPoConfigId"/>
            <if condition="yotPoConfigId == null"><return message="No yotPoConfigId found with productStoreId ${productStoreId}"/></if>

            <entity-find-one entity-name="YotPo.YotPoConfiguration"  value-field="yotPoConfig"/>
            <if condition="yotPoConfig == null">
                <return error="true" message="No YotPoConfiguration found with ID ${yotPoConfigId}"/>
            </if>

            <entity-find-one entity-name="mantle.product.Product" value-field="product"/>
            <if condition="product == null"><return message="No product found with ID ${productId}"/></if>
            <entity-find entity-name="mantle.product.ProductContent" list="contentList" cache="true">
                <date-filter/><econdition field-name="productId"/>
                <order-by field-name="sequenceNum,-fromDate"/>
            </entity-find>

            <set field="priceUomId" from="productStore?.defaultCurrencyUomId"/>
            <service-call name="mantle.product.PriceServices.get#ProductPrice" out-map="priceMap"
                    in-map="[productId:productId, priceUomId:priceUomId ? priceUomId : 'USD', productStoreId:productStoreId]"/>
            <if condition="priceMap == null"><return message="No Price found with productId ${productId}"/></if>
            <set field="price" from="priceMap.price"/>

            <service-call name="YotPo.YotPoServices.login#YotPo" in-map="context" out-map="token"/>
            <if condition="token.token.access_token == null">
                <return error="true" message="Error with YotPo Access Token."/>
            </if>
            <set field="uToken" from="token.token.access_token"/>
          
            <entity-find-one entity-name="mantle.product.store.ProductStoreSetting" value-field="productImageLocation">
                <econdition field-name="productStoreId" from="productStoreId"/>
                <econdition field-name="settingTypeEnumId" from="'PsstProductImageLoc'"/>
            </entity-find-one>
            <if condition="productImageLocation == null"><return message="No productImageLocation found with productStoreId ${productStoreId}"/></if>

            <entity-find-one entity-name="mantle.product.store.ProductStoreSetting" value-field="productDetailLocation">
                <econdition field-name="productStoreId" from="productStoreId"/>
                <econdition field-name="settingTypeEnumId" from="'PsstProductDetailLoc'"/>
            </entity-find-one>
            <if condition="productImageLocation == null"><return message="No productDetailLocation found with productStoreId ${productStoreId}"/></if>
            
            <if condition="contentList != null">
                <set field="imageDetail" from="contentList.find({'PcntImageDetail' == it.productContentTypeEnumId})"/>
                <if condition="imageDetail == null">
                    <set field="imageDetail" from="contentList.find({'PcntImageMedium' == it.productContentTypeEnumId})"/>
                    <if condition="imageDetail == null">
                        <set field="imageDetail" from="contentList.find({'PcntImageSmall' == it.productContentTypeEnumId})"/>
                    </if>
                </if>
                <set field="productImageBaseUrl" from="productStore.storeDomain + '/' + productImageLocation.settingValue + '/' + imageDetail.productContentId ? imageDetail.productContentId : ''"/>

                <set field="longDescLocation" from="contentList.find({'PcntDescriptionLong' == it.productContentTypeEnumId})?.contentLocation"/>

                <if condition="longDescLocation">
                    <set field="descriptionLong" from="ec.resource.getLocationText(longDescLocation, true)"/>
                </if>
            </if>

            <set field="productDetailBaseUrl" from="productStore.storeDomain + productDetailLocation.settingValue + '/' + productId"/>
           
            <set field="item" from="[name:product.productName, url:productDetailBaseUrl, 
                image_url:productImageBaseUrl ? productImageBaseUrl : productStore.storeDomain + '/' + productImageLocation.settingValue, 
                description:descriptionLong ? descriptionLong : '', currency:priceUomId ? priceUomId : 'USD', price:price, 
                product_tags:product.comments, specs:[sku:productId]]"/>
            
            <set field="productMap" type="NewMap" value="null"/>
            <script>productMap = new HashMap()</script>
            <script>productMap.put(productId, item)</script>

            <set field="requestMap" from="[utoken:uToken, products:productMap]"/>
            
            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.PUT)
                        .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host(yotPoConfig.hostName ?: "api.yotpo.com").port(443)
                        .path("apps").path("${yotPoConfig.clientId}").path("products").path("mass_update").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    
                if (restResponse.statusCode != 200) {
                    ec.logger.error("YotPo API Response ${restResponse.statusCode}")
                    ec.message.addMessage("YotPo API Error ${restResponse.statusCode}")
                    return
                }

                responseMap = restResponse.jsonObject()

            ]]></script>
        </actions>
    </service>
    
    <!-- this service registers all the products of a certain product StoreId  -->
    <service verb="create" noun="AllProducts">
        <in-parameters>
            <parameter name="productStoreId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore">
                <field-map field-name="productStoreId"/></entity-find-one>
            <if condition="productStore == null"><return message="No productStore found with productStoreId ${productStoreId}"/></if>

            <entity-find-one entity-name="mantle.product.store.ProductStoreCategory" value-field="productStoreCategory">
                <econdition field-name="productStoreId" from="productStoreId"/>
                <econdition field-name="storeCategoryTypeEnumId" from="'PsctSearch'"/>
            </entity-find-one>
            <if condition="productStoreCategory == null">
                <entity-find-one entity-name="mantle.product.store.ProductStoreCategory" value-field="productStoreCategory">
                    <econdition field-name="productStoreId" from="productStoreId"/>
                    <econdition field-name="storeCategoryTypeEnumId" from="'PsctViewAllow'"/>
                </entity-find-one>
                <if condition="productStoreCategory == null"><return message="No productStoreCategory found with productStoreId ${productStoreId}"/></if>
            </if>

            <set field="productCategoryId" from="productStoreCategory.productCategoryId"/>

            <entity-find entity-name="mantle.product.category.ProductCategoryMember" list="productList" cache="true">
                <search-form-inputs default-order-by="${orderBy}"/>
                <date-filter/><econdition field-name="productCategoryId"/>
            </entity-find>
            <iterate list="productList" entry="product">
                <service-call name="YotPo.YotPoServices.create#Product" in-map="[productId:product.productId, productStoreId:productStoreId]" out-map="responseMap"/>
            </iterate>
        </actions>
    </service>


    <service verb="create" noun="Product">
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="productStoreId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore">
                <field-map field-name="productStoreId"/></entity-find-one>
            <if condition="productStore == null"><return message="No productStore found with productStoreId ${productStoreId}"/></if>

            <set field="yotPoConfigId" from="productStore.yotPoConfigId"/>
            <if condition="yotPoConfigId == null"><return message="No yotPoConfigId found with productStoreId ${productStoreId}"/></if>

            <entity-find-one entity-name="YotPo.YotPoConfiguration"  value-field="yotPoConfig"/>
            <if condition="yotPoConfig == null">
                <return error="true" message="No YotPoConfiguration found with ID ${yotPoConfigId}"/>
            </if>

            <entity-find-one entity-name="mantle.product.Product" value-field="product"/>
            <if condition="product == null"><return message="No product found with ID ${productId}"/></if>

            <entity-find entity-name="mantle.product.ProductContent" list="contentList" cache="true">
                <date-filter/><econdition field-name="productId"/>
                <order-by field-name="sequenceNum,-fromDate"/>
            </entity-find>

            <set field="priceUomId" from="productStore?.defaultCurrencyUomId"/>
            <service-call name="mantle.product.PriceServices.get#ProductPrice" out-map="priceMap"
                    in-map="[productId:productId, priceUomId:priceUomId ? priceUomId : 'USD', productStoreId:productStoreId]"/>
            <if condition="priceMap == null"><return message="No Price found with productId ${productId}"/></if>
            <set field="price" from="priceMap.price"/>

            <entity-find-one entity-name="mantle.product.store.ProductStoreSetting" value-field="productImageLocation">
                <econdition field-name="productStoreId" from="productStoreId"/>
                <econdition field-name="settingTypeEnumId" from="'PsstProductImageLoc'"/>
            </entity-find-one>
            <if condition="productImageLocation == null"><return message="No productImageLocation found with productStoreId ${productStoreId}"/></if>

            <entity-find-one entity-name="mantle.product.store.ProductStoreSetting" value-field="productDetailLocation">
                <econdition field-name="productStoreId" from="productStoreId"/>
                <econdition field-name="settingTypeEnumId" from="'PsstProductDetailLoc'"/>
            </entity-find-one>
            <if condition="productImageLocation == null"><return message="No productDetailLocation found with productStoreId ${productStoreId}"/></if>

            <service-call name="YotPo.YotPoServices.login#YotPo" in-map="context" out-map="token"/>
            <if condition="token.token.access_token == null">
                <return error="true" message="Error with YotPo Access Token."/>
            </if>
            <set field="uToken" from="token.token.access_token"/>

            <if condition="contentList != null">
                <set field="imageDetail" from="contentList.find({'PcntImageDetail' == it.productContentTypeEnumId})"/>
                <if condition="imageDetail == null">
                    <set field="imageDetail" from="contentList.find({'PcntImageMedium' == it.productContentTypeEnumId})"/>
                    <if condition="imageDetail == null">
                        <set field="imageDetail" from="contentList.find({'PcntImageSmall' == it.productContentTypeEnumId})"/>
                    </if>
                </if>
                <set field="productImageBaseUrl" from="productStore.storeDomain + '/' + productImageLocation.settingValue + '/' + imageDetail.productContentId ? imageDetail.productContentId : ''"/>

                <set field="longDescLocation" from="contentList.find({'PcntDescriptionLong' == it.productContentTypeEnumId})?.contentLocation"/>

                <if condition="longDescLocation">
                    <set field="descriptionLong" from="ec.resource.getLocationText(longDescLocation, true)"/>
                </if>
            </if>

            <set field="productDetailBaseUrl" from="productStore.storeDomain + productDetailLocation.settingValue + '/' + productId"/>


            <set field="item" from="[name:product.productName, url:productDetailBaseUrl, 
                image_url:productImageBaseUrl ? productImageBaseUrl : productStore.storeDomain + '/' + productImageLocation.settingValue, description:descriptionLong ? descriptionLong : '', 
                currency:priceUomId ? priceUomId : 'USD', price:price, 
                product_tags:product.comments, specs:[sku:productId]]"/>
            
            <set field="productMap" type="NewMap" value="null"/>
            <script>productMap = new HashMap()</script>
            <script>productMap.put(productId, item)</script>

            <set field="requestMap" from="[utoken:uToken, products:productMap]"/>
            
            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                        .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host(yotPoConfig.hostName ?: "api.yotpo.com").port(443)
                        .path("apps").path("${yotPoConfig.clientId}").path("products").path("mass_create").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    
                if (restResponse.statusCode != 200) {
                    ec.logger.error("YotPo API Response ${restResponse.statusCode}")
                    ec.message.addMessage("YotPo API Error ${restResponse.statusCode}")
                    return
                }

                responseMap = restResponse.jsonObject()

            ]]></script>
        </actions>
    </service>

    <!-- Service to create a new review -->
    <service verb="create" noun="Review">
        <in-parameters>
            <parameter name="productStoreId" required="true"/>
            <parameter name="productId" required="true"/>
            <parameter name="customerPartyId"/>
            <parameter name="reviewContent" required="true"><description>User comment</description></parameter>
            <parameter name="reviewTitle" required="true"><description>Title of the review</description></parameter>
            <parameter name="reviewScore" required="true"><description>Review score that can range from 1 to 5</description></parameter>
            <parameter name="timeStamp"><description>Date of when the review was written, if nothing is sent YotPo automatically date</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore">
                <field-map field-name="productStoreId"/></entity-find-one>
            <if condition="productStore == null"><return message="No productStore found with productStoreId ${productStoreId}"/></if>

            <entity-find-one entity-name="mantle.product.Product" value-field="product"/>
            <if condition="product == null"><return message="No product found with ID ${productId}"/></if>

            <entity-find entity-name="mantle.product.ProductContent" list="contentList" cache="true">
                <date-filter/><econdition field-name="productId"/>
                <order-by field-name="sequenceNum,-fromDate"/>
            </entity-find>

            <entity-find-one entity-name="mantle.product.store.ProductStoreSetting" value-field="productImageLocation">
                <econdition field-name="productStoreId" from="productStoreId"/>
                <econdition field-name="settingTypeEnumId" from="'PsstProductImageLoc'"/>
            </entity-find-one>
            <if condition="productImageLocation == null"><return message="No productImageLocation found with productStoreId ${productStoreId}"/></if>

            <entity-find-one entity-name="mantle.product.store.ProductStoreSetting" value-field="productDetailLocation">
                <econdition field-name="productStoreId" from="productStoreId"/>
                <econdition field-name="settingTypeEnumId" from="'PsstProductDetailLoc'"/>
            </entity-find-one>
            <if condition="productImageLocation == null"><return message="No productDetailLocation found with productStoreId ${productStoreId}"/></if>

            <set field="priceUomId" from="productStore?.defaultCurrencyUomId"/>
            <service-call name="mantle.product.PriceServices.get#ProductPrice" out-map="priceMap"
                    in-map="[productId:productId, priceUomId:priceUomId ? priceUomId : 'USD', productStoreId:productStoreId]"/>
            <if condition="priceMap == null"><return message="No Price found with productId ${productId}"/></if>
            <set field="price" from="priceMap.price"/>
            
            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="emailInfo"
                in-map="[partyId:customerPartyId, emailContactMechPurposeId:true]"/>
            <set field="email" from="emailInfo.emailAddress"/>
            <if condition="email == null">
                <return message="The client's email was not found with customerPartyId ${customerPartyId}"/>
            </if>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="partyDetail">
                <field-map field-name="partyId" from="customerPartyId"/>
            </entity-find-one>
            <if condition="partyDetail == null"><return message="No partyDetail found with partyId ${customerPartyId}"/></if>

            <set field="organizationName" from="partyDetail.organizationName ? partyDetail.organizationName : ''"/>
            <set field="customerName" from="partyDetail.firstName + ' ' + partyDetail.lastName + ' ' + organizationName"/>

            <if condition="contentList != null">
                <set field="imageDetail" from="contentList.find({'PcntImageDetail' == it.productContentTypeEnumId})"/>
                <if condition="imageDetail == null">
                    <set field="imageDetail" from="contentList.find({'PcntImageMedium' == it.productContentTypeEnumId})"/>
                    <if condition="imageDetail == null">
                        <set field="imageDetail" from="contentList.find({'PcntImageSmall' == it.productContentTypeEnumId})"/>
                    </if>
                </if>
                <set field="productImageBaseUrl" from="productStore.storeDomain + '/' + productImageLocation.settingValue + '/' + imageDetail.productContentId ? imageDetail.productContentId : ''"/>

                <set field="longDescLocation" from="contentList.find({'PcntDescriptionLong' == it.productContentTypeEnumId})?.contentLocation"/>

                <if condition="longDescLocation">
                    <set field="descriptionLong" from="ec.resource.getLocationText(longDescLocation, true)"/>
                </if>
            </if>

            <set field="productDetailBaseUrl" from="productStore.storeDomain + productDetailLocation.settingValue + '/' + productId"/>

            <set field="yotPoConfigId" from="productStore.yotPoConfigId"/>
            <if condition="yotPoConfigId == null"><return message="No yotPoConfigId found with productStoreId ${productStoreId}"/></if>

            <entity-find-one entity-name="YotPo.YotPoConfiguration"  value-field="yotPoConfig"/>
            <if condition="yotPoConfig == null">
                <return error="true" message="No YotPoConfiguration found with ID ${yotPoConfigId}"/>
            </if>

            <service-call name="YotPo.YotPoServices.login#YotPo" in-map="context" out-map="token"/>
            <if condition="token.token.access_token == null">
                <return error="true" message="Error with Access Token."/>
            </if>
            <set field="uToken" from="token.token.access_token"/>

            <set field="requestMap" from="[appkey:yotPoConfig.clientId, domain:productStore.storeDomain, sku:productId,
                product_title:product.productName, product_description:descriptionLong ? descriptionLong : '', 
                product_url:productDetailBaseUrl, product_image_url:productImageBaseUrl ? productImageBaseUrl : productStore.storeDomain + '/' + productImageLocation.settingValue, display_name:customerName, email:email, review_content:reviewContent,
                review_title:reviewTitle, review_score:reviewScore, time_stamp:timeStamp]" />
            <!-- Path only for tests 
                .path("reviews")path("dynamic_create")
            -->
            <!-- Path for production 
                .path("${yotPoConfig.apiVersion}").path("widget").path("reviews").build() 
             -->
            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                        .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host(yotPoConfig.hostName ?: "api.yotpo.com").port(443)
                        .path("reviews")path("dynamic_create").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    
                if (restResponse.statusCode != 200) {
                    ec.logger.error("YotPo API Response ${restResponse.statusCode}")
                    ec.message.addMessage("YotPo API Error ${restResponse.statusCode}")
                    return
                }

                responseMap = restResponse.jsonObject()

            ]]></script>
        </actions>
    </service>

    <!-- This service returns the list of reviews according to the product Id -->
    <service verb="get" noun="ReviewByProduct">
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="productStoreId" required="true"/>
            <parameter name="perPage" required="true"><description>Number of reviews per page</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore">
                <field-map field-name="productStoreId"/></entity-find-one>
            <if condition="productStore == null"><return message="No productStore found with productStoreId ${productStoreId}"/></if>

            <set field="yotPoConfigId" from="productStore.yotPoConfigId"/>
            <if condition="yotPoConfigId == null"><return message="No yotPoConfigId found with productStoreId ${productStoreId}"/></if>

            <entity-find-one entity-name="YotPo.YotPoConfiguration"  value-field="yotPoConfig"/>
            <if condition="yotPoConfig == null">
                <return error="true" message="No YotPoConfiguration found with ID ${yotPoConfigId}"/>
            </if>

            <service-call name="YotPo.YotPoServices.login#YotPo" in-map="context" out-map="token"/>
            <if condition="token.token.access_token == null">
                <return error="true" message="Error with Access Token."/>
            </if>
            <set field="uToken" from="token.token.access_token"/>

            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.GET)
                restClient.uri().protocol("https").host(yotPoConfig.hostName ?: "api.yotpo.com").port(443)
                        .path("${yotPoConfig.apiVersion}").path("widget").path("${yotPoConfig.clientId}")
                        .path("products").path("${productId}").path("reviews.json")
                        .parameter("per_page", "${perPage}").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    
                if (restResponse.statusCode != 200) {
                    ec.logger.error("YotPo API Response ${restResponse.statusCode}")
                    ec.message.addMessage("YotPo API Error ${restResponse.statusCode}")
                    return
                }

                responseMap = restResponse.jsonObject()
            ]]></script>
        </actions>
    </service>

    <service verb="login" noun="YotPo">
        <in-parameters>
            <parameter name="yotPoConfigId"/>
            <parameter name="yotPoConfig" type="Map"/>
        </in-parameters>
        <out-parameters>
            <parameter name="token" type="Map"/>
        </out-parameters>
        <actions>
            <if condition="yotPoConfig == null">
                <entity-find-one entity-name="YotPo.YotPoConfiguration"  value-field="yotPoConfig"/>
                <if condition="yotPoConfig == null">
                    <return error="true" message="No YotPoConfiguration found with ID ${yotPoConfigId}"/>
                </if>
            </if>
            
            <set field="requestMap" from="[client_id:yotPoConfig.clientId, 
                client_secret:yotPoConfig.clientSecret, grant_type:'client_credentials']" />

            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                        .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host(yotPoConfig.hostName ?: "api.yotpo.com").port(443)
                        .path("oauth").path("token").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    
                if (restResponse.statusCode != 200) {
                    ec.logger.error("YotPo API Response ${restResponse.statusCode}")
                    ec.message.addMessage("YotPo API Error ${restResponse.statusCode}")
                    return
                }

                token = restResponse.jsonObject()

                if(token.status != null || token.error != null) {
                    ec.logger.error("YotPo API Error Response ${token.status != null ? token.status.code : token.error}")
                    ec.message.addMessage("YotPo API Error Response ${token.status != null ? token.status.error_type : token.error}")
                    token = null
                    return
                }
            ]]></script> 
        </actions>
    </service>
</services>
